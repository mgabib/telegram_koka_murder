from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
import asyncio
import logging

TOKEN = "7546551355:AAFWib_qIbwH-Dsq0sm-G1Q5SGRyn1LWOr8"
WEBAPP_URL = "https://telegram-webapp-koka-game-murder.onrender.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL

bot = Bot(token=TOKEN)
dp = Dispatcher()


from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import asyncio

TOKEN = "7546551355:AAFWib_qIbwH-Dsq0sm-G1Q5SGRyn1LWOr8"
WEB_APP_URL = "https://telegram-webapp-koka-game-murder.onrender.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(commands=["start"])
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEB_APP_URL)))
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É!", reply_markup=keyboard)

async def main():
    await dp.start_polling(bot)

if name == "__main__":
    asyncio.run(main())

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
dp.message.register(start_handler, Command("start"))


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if name == "__main__":
    asyncio.run(main())

import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
TOKEN = "7546551355:AAFWib_qIbwH-Dsq0sm-G1Q5SGRyn1LWOr8"

# –†–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
FIELD_SIZE = 5

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞, –º–∞–Ω—å—è–∫–∞, –±–æ–Ω—É—Å–æ–≤ –∏ –ª–æ–≤—É—à–µ–∫
player_x, player_y = FIELD_SIZE // 2, FIELD_SIZE // 2
maniac_x, maniac_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)
bonus_x, bonus_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)
trap_x, trap_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)

# –û—á–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏ –æ—Ä—É–∂–∏–µ
score = 0
has_knife = False
has_gun = False

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
game_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í–ª–µ–≤–æ"), KeyboardButton(text="‚û°Ô∏è –í–ø—Ä–∞–≤–æ")],
        [KeyboardButton(text="‚¨áÔ∏è –í–Ω–∏–∑"), KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
    ],
    resize_keyboard=True
)

shop_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üî™ –ö—É–ø–∏—Ç—å –Ω–æ–∂ (10 –æ—á–∫–æ–≤)")],
        [KeyboardButton(text="üî´ –ö—É–ø–∏—Ç—å –ø–∏—Å—Ç–æ–ª–µ—Ç (50 –æ—á–∫–æ–≤)")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
def draw_field():
    field = [["‚¨ú" for _ in range(FIELD_SIZE)] for _ in range(FIELD_SIZE)]
    field[player_y][player_x] = "üü¢"  # –ò–≥—Ä–æ–∫
    field[maniac_y][maniac_x] = "üî¥"  # –ú–∞–Ω—å—è–∫
    field[bonus_y][bonus_x] = "‚≠ê"  # –ë–æ–Ω—É—Å
    field[trap_y][trap_x] = "‚ö†Ô∏è"  # –õ–æ–≤—É—à–∫–∞
    return "\n".join("".join(row) for row in field)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(message: Message):
    global player_x, player_y, maniac_x, maniac_y, bonus_x, bonus_y, trap_x, trap_y, score, has_knife, has_gun
    player_x, player_y = FIELD_SIZE // 2, FIELD_SIZE // 2
    maniac_x, maniac_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)
    bonus_x, bonus_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)
    trap_x, trap_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)
    score = 0
    has_knife = False
    has_gun = False
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–µ–≥–∏ –æ—Ç –º–∞–Ω—å—è–∫–∞! üî¥ –°–æ–±–∏—Ä–∞–π ‚≠ê –∏ –∏–∑–±–µ–≥–∞–π ‚ö†Ô∏è!", reply_markup=game_keyboard)
    await message.answer(draw_field() + f"\n\n–û—á–∫–∏: {score}")

# –î–≤–∏–∂–µ–Ω–∏–µ –º–∞–Ω—å—è–∫–∞
def move_maniac():
    global maniac_x, maniac_y

    if maniac_x < player_x:
        maniac_x += 1
    elif maniac_x > player_x:
        maniac_x -= 1

    if maniac_y < player_y:
        maniac_y += 1
    elif maniac_y > player_y:
        maniac_y -= 1

# –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
async def move_player(message: Message):
    global player_x, player_y, score, bonus_x, bonus_y, trap_x, trap_y, has_knife, has_gun, maniac_x, maniac_y

    if message.text == "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö" and player_y > 0:
        player_y -= 1
    elif message.text == "‚¨áÔ∏è –í–Ω–∏–∑" and player_y < FIELD_SIZE - 1:
        player_y += 1
    elif message.text == "‚¨ÖÔ∏è –í–ª–µ–≤–æ" and player_x > 0:
        player_x -= 1
    elif message.text == "‚û°Ô∏è –í–ø—Ä–∞–≤–æ" and player_x < FIELD_SIZE - 1:
        player_x += 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–æ–≤ –∏ –ª–æ–≤—É—à–µ–∫
    if (player_x, player_y) == (bonus_x, bonus_y):
        score += 5
        bonus_x, bonus_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)

    if (player_x, player_y) == (trap_x, trap_y):
        score -= 3
        trap_x, trap_y = random.randint(0, FIELD_SIZE - 1), random.randint(0, FIELD_SIZE - 1)

    score += 1  # –û—á–∫–∏ –∑–∞ —à–∞–≥

    # –î–≤–∏–≥–∞–µ–º –º–∞–Ω—å—è–∫–∞
    move_maniac()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–≥–Ω–∞–ª –ª–∏ –º–∞–Ω—å—è–∫ –∏–≥—Ä–æ–∫–∞
    if player_x == maniac_x and player_y == maniac_y:
        if has_gun:
            has_gun = False
            await message.answer("üî´ –¢—ã –∑–∞—Å—Ç—Ä–µ–ª–∏–ª –º–∞–Ω—å—è–∫–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!", reply_markup=game_keyboard)
        elif has_knife:
            has_knife = False
            await message.answer("üî™ –¢—ã —É–±–∏–ª –º–∞–Ω—å—è–∫–∞ –Ω–æ–∂–æ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!", reply_markup=game_keyboard)
        else:
            await message.answer("üò± –ú–∞–Ω—å—è–∫ –ø–æ–π–º–∞–ª —Ç–µ–±—è! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", reply_markup=game_keyboard)
        return

    await message.answer(draw_field() + f"\n\n–û—á–∫–∏: {score}")

# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
async def open_shop(message: Message):
    await message.answer("üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=shop_keyboard)

# –ü–æ–∫—É–ø–∫–∞ –Ω–æ–∂–∞
async def buy_knife(message: Message):
    global score, has_knife
    if score >= 10:
        score -= 10
        has_knife = True
        await message.answer("üî™ –¢—ã –∫—É–ø–∏–ª –Ω–æ–∂! –ï—Å–ª–∏ –º–∞–Ω—å—è–∫ –¥–æ–≥–æ–Ω–∏—Ç, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—â–∏—Ç–∏—Ç—å—Å—è.", reply_markup=shop_keyboard)
    else:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!", reply_markup=shop_keyboard)

# –ü–æ–∫—É–ø–∫–∞ –ø–∏—Å—Ç–æ–ª–µ—Ç–∞
async def buy_gun(message: Message):
    global score, has_gun
    if score >= 50:
        score -= 50
        has_gun = True
        await message.answer("üî´ –¢—ã –∫—É–ø–∏–ª –ø–∏—Å—Ç–æ–ª–µ—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å –º–∞–Ω—å—è–∫–∞.", reply_markup=shop_keyboard)
    else:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!", reply_markup=shop_keyboard)

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∏–≥—Ä—É
async def back_to_game(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏–≥—Ä—É!", reply_markup=game_keyboard)

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    dp.message.register(start_handler, Command("start"))
    dp.message.register(move_player, F.text.in_(["‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", "‚¨áÔ∏è –í–Ω–∏–∑", "‚¨ÖÔ∏è –í–ª–µ–≤–æ", "‚û°Ô∏è –í–ø—Ä–∞–≤–æ"]))
    dp.message.register(open_shop, F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
    dp.message.register(buy_knife, F.text == "üî™ –ö—É–ø–∏—Ç—å –Ω–æ–∂ (10 –æ—á–∫–æ–≤)")
    dp.message.register(buy_gun, F.text == "üî´ –ö—É–ø–∏—Ç—å –ø–∏—Å—Ç–æ–ª–µ—Ç (50 –æ—á–∫–æ–≤)")
    dp.message.register(back_to_game, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("‚¨ÜÔ∏è –í–≤–µ—Ä—Ö"))
keyboard.add(KeyboardButton("‚¨ÖÔ∏è –í–ª–µ–≤–æ"), KeyboardButton("‚û°Ô∏è –í–ø—Ä–∞–≤–æ"))
keyboard.add(KeyboardButton("‚¨áÔ∏è –í–Ω–∏–∑"))
keyboard.add(KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"))

# –î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–∫–∞—Ö
game_data = {}

@dp.message_handler(commands=["start"])
async def start_game(message: types.Message):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–õ–µ–≥–∫–∏–π"), KeyboardButton("–°—Ä–µ–¥–Ω–∏–π"), KeyboardButton("–¢—è–∂–µ–ª—ã–π"))

    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["–õ–µ–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–¢—è–∂–µ–ª—ã–π"])
async def set_difficulty(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã."""
    user_id = message.from_user.id
    difficulty = message.text.lower()

    game_data[user_id] = {
        "x": 2, "y": 2,
        "maniac_x": 0, "maniac_y": 0,
        "score": 0, "weapon": None,
        "difficulty": difficulty,
        "turns": 0,
        "bonus_x": None, "bonus_y": None, "bonus_active": False,
        "trap_x": None, "trap_y": None, "trap_active": False
    }

    await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {difficulty} —É—Ä–æ–≤–µ–Ω—å. –ù–∞—á–∏–Ω–∞–π –±–µ–≥–∞—Ç—å!", reply_markup=keyboard)

def spawn_bonus_or_trap(user_id):
    """–°–æ–∑–¥–∞—ë—Ç –±–æ–Ω—É—Å –∏–ª–∏ –ª–æ–≤—É—à–∫—É –Ω–∞ –ø–æ–ª–µ."""
    if user_id not in game_data:
        return

    if random.random() < 0.5:
        game_data[user_id]["bonus_x"], game_data[user_id]["bonus_y"] = random.randint(0, 4), random.randint(0, 4)
        game_data[user_id]["bonus_active"] = True
    else:
        game_data[user_id]["trap_x"], game_data[user_id]["trap_y"] = random.randint(0, 4), random.randint(0, 4)
        game_data[user_id]["trap_active"] = True

@dp.message_handler(lambda message: message.text in ["‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", "‚¨áÔ∏è –í–Ω–∏–∑", "‚¨ÖÔ∏è –í–ª–µ–≤–æ", "‚û°Ô∏è –í–ø—Ä–∞–≤–æ"])
async def move_player(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã."""
    user_id = message.from_user.id
    if user_id not in game_data:
        await start_game(message)
        return

    move = {"‚¨ÜÔ∏è –í–≤–µ—Ä—Ö": (0, -1), "‚¨áÔ∏è –í–Ω–∏–∑": (0, 1), "‚¨ÖÔ∏è –í–ª–µ–≤–æ": (-1, 0), "‚û°Ô∏è –í–ø—Ä–∞–≤–æ": (1, 0)}
    dx, dy = move[message.text]

    game_data[user_id]["x"] = max(0, min(4, game_data[user_id]["x"] + dx))
    game_data[user_id]["y"] = max(0, min(4, game_data[user_id]["y"] + dy))

    game_data[user_id]["score"] += 1
    game_data[user_id]["turns"] += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã –∏ –ª–æ–≤—É—à–∫–∏
    if game_data[user_id]["bonus_active"] and (game_data[user_id]["x"], game_data[user_id]["y"]) == (game_data[user_id]["bonus_x"], game_data[user_id]["bonus_y"]):
        game_data[user_id]["score"] += 5
        game_data[user_id]["bonus_active"] = False
        await message.answer("üî• –¢—ã –Ω–∞—à–µ–ª –±–æ–Ω—É—Å! +5 –æ—á–∫–æ–≤!")

    if game_data[user_id]["trap_active"] and (game_data[user_id]["x"], game_data[user_id]["y"]) == (game_data[user_id]["trap_x"], game_data[user_id]["trap_y"]):
        game_data[user_id]["score"] = max(0, game_data[user_id]["score"] - 3)
        game_data[user_id]["trap_active"] = False
        await message.answer("üíÄ –¢—ã –ø–æ–ø–∞–ª –≤ –ª–æ–≤—É—à–∫—É! -3 –æ—á–∫–∞!")

    # –î–≤–∏–∂–µ–Ω–∏–µ –º–∞–Ω—å—è–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty = game_data[user_id]["difficulty"]
    if difficulty == "–ª–µ–≥–∫–∏–π" and game_data[user_id]["turns"] % 2 == 0:
        move_maniac(user_id)
    elif difficulty == "—Å—Ä–µ–¥–Ω–∏–π":
        move_maniac(user_id)
    elif difficulty == "—Ç—è–∂–µ–ª—ã–π":
        move_maniac(user_id)
        move_maniac(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –º–∞–Ω—å—è–∫–æ–º
    if game_data[user_id]["x"] == game_data[user_id]["maniac_x"] and game_data[user_id]["y"] == game_data[user_id]["maniac_y"]:
        if game_data[user_id]["weapon"] == "–Ω–æ–∂":
            await message.answer("–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–æ–∂ –∏ –æ—Ç–±–∏–ª—Å—è –æ—Ç –º–∞–Ω—å—è–∫–∞!")
            game_data[user_id]["weapon"] = None
        elif game_data[user_id]["weapon"] == "–ø–∏—Å—Ç–æ–ª–µ—Ç":
            await message.answer("–¢—ã –∑–∞—Å—Ç—Ä–µ–ª–∏–ª –º–∞–Ω—å—è–∫–∞! –ü–æ–±–µ–¥–∞! üî•")
            del game_data[user_id]
            return
        else:
            await message.answer("–ú–∞–Ω—å—è–∫ –ø–æ–π–º–∞–ª —Ç–µ–±—è! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. üòµ", reply_markup=ReplyKeyboardRemove())
            del game_data[user_id]
            return

            # –ö–∞–∂–¥—ã–µ 3 —Ö–æ–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –±–æ–Ω—É—Å –∏–ª–∏ –ª–æ–≤—É—à–∫–∞
        if game_data[user_id]["score"] % 3 == 0:
            spawn_bonus_or_trap(user_id)

        await message.answer(f"–û—á–∫–∏: {game_data[user_id]['score']}\n"
                             f"–ü–æ–∑–∏—Ü–∏—è: {game_data[user_id]['x']}, {game_data[user_id]['y']}\n"
                             f"–ú–∞–Ω—å—è–∫: {game_data[user_id]['maniac_x']}, {game_data[user_id]['maniac_y']}")

        def move_maniac(user_id):
            """–ú–∞–Ω—å—è–∫ –¥–≤–∏–≥–∞–µ—Ç—Å—è –∫ –∏–≥—Ä–æ–∫—É."""
            if user_id not in game_data:
                return

            player_x, player_y = game_data[user_id]["x"], game_data[user_id]["y"]
            maniac_x, maniac_y = game_data[user_id]["maniac_x"], game_data[user_id]["maniac_y"]

            if maniac_x < player_x:
                maniac_x += 1
            elif maniac_x > player_x:
                maniac_x -= 1

            if maniac_y < player_y:
                maniac_y += 1
            elif maniac_y > player_y:
                maniac_y -= 1

            game_data[user_id]["maniac_x"], game_data[user_id]["maniac_y"] = maniac_x, maniac_y

        if name == "__main__":
            logging.basicConfig(level=logging.INFO)
            executor.start_polling(dp, skip_updates=True)

import asyncio

async def main():
    await dp.start_polling(bot)

if name == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/')
def home():
    return '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'

if name == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)